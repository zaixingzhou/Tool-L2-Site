using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using System.IO;
using ZedGraph;
using System.IO.Compression;

using System.Windows.Forms;

namespace LANDIS_II_Site
{
    public partial class FormMain : Form
    {
        public FormMain()
        {
            InitializeComponent();

            // set default values for some components
            InitializeComponentPlus();
            //RunModel(); // default run
            //SetDefaultCharts();



        }

        public Dictionary<string, object> recordInput = new Dictionary<string, object>();



        private void InitializeComponentPlus()
        {
            // set default values for some components

            cbSuccessionOption.SelectedIndex = 0;  // PnET-Extension

            cbSeedingAlg.SelectedIndex = 0;  // WardSeedDispersal

            tabControlGraph.SelectedTab = tabPageCarbon; // 


            InitializeCbEcoPara();  // intialize cbAddEcoPara

            InitializeCbSppGenericPara();  // intialize cbSppGenericPara

            InitializeDataGridViewSppLifeHistory(); // intialize dataGridViewSppLifeHistory

            InitializeDataGridViewSppEcophysi(); // intialize dataGridViewSppEcophysi

            //dataGridViewSppEcophysi.Rows.Clear(); // Clears all rows

            // Set default selected tab (carbon)
            
            tabControlGraph.SelectedTab = tabPageCarbon; // 

            // load the example 
            String FileExample = @".\Inter\Site_input_example.csv";
            LoadInputFromCsv(FileExample);



        }


        private void SetDefaultCharts()
        {
            checkedListBoxClimate.SetItemChecked(0, true);
        }

        private void MenuExit_Click(object sender, EventArgs e)
        {
            this.Close();

        }

        private void MenuRun_Click(object sender, EventArgs e)
        {
            try
            {
                BuildLandisInput(); // build landis pacege
                RunModel();  // run the model like the traditional landis way and copy the results to the sitetool output
                // load site results from the sitetool output
                LoadResultSite();
                MessageBox.Show($"Model running ends", "Batch File Execution");
            }
            catch (Exception ex)
            {
                // Handle exceptions
                MessageBox.Show($"An error occurred: {ex.Message}", "Error");
            }

        }

        private void RunModel()
        {
            /*
            string InputSuccession = cbSuccessionOption.Text;
            int ext_succession = cbSuccessionOption.SelectedIndex;

            if (ext_succession == 0)
            {
                InputSuccession = "\\PnET-Succession";
            }
            if (ext_succession == 1)
            {
                InputSuccession = "\\PnET-CN-Succession";
            }

            string InputDirectory = @".\Input";
            InputDirectory = InputDirectory + InputSuccession;
            */

            string InputDirectory = InputDir(cbSuccessionOption);// get the current succesion input directory
            // Get the case file generated by the win interface
            string batFilePath = InputDirectory + "\\site_run.bat";

            string OutputDirectory = @".\Output";

            //MessageBox.Show($"Current Directory: {currentDirectory}", "Message");          
            // Path to the .bat file
            //string batFilePath = @"C:\Path\To\YourFile.bat";

            // Create a new process
            Process process = new Process
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = batFilePath,   // Specify the .bat file
                    UseShellExecute = false, // Do not use the OS shell
                    CreateNoWindow = true,   // Hide the command prompt window
                    RedirectStandardOutput = true, // Capture the output
                    RedirectStandardError = true   // Capture error messages
                }
            };

            // Start the process
            process.Start();

            // Optionally, read the output
            string output = process.StandardOutput.ReadToEnd();
            string error = process.StandardError.ReadToEnd();

            // Wait for the process to finish
            //process.WaitForExit();

            // Display the output or errors in a message box
            //MessageBox.Show($"Output:\n{output}\n\nError:\n{error}", "Batch File Execution");

            // MessageBox.Show($"Model running ends", "Batch File Execution");

            // copy results to Output directory
            string ResultDirectory = InputDirectory + "\\output";

            CopyDirectory(ResultDirectory, OutputDirectory);



            // set DefaultCharts

            //tabControlGraph.SelectedTab = tabPageCarbon; //
            // SetDefaultCharts();
           


        }

        static void CopyDirectory(string sourceDir, string destinationDir, bool overwrite = true)
        {
            // Ensure the source directory exists
            if (!Directory.Exists(sourceDir))
            {
                throw new DirectoryNotFoundException($"Source directory does not exist: {sourceDir}");
            }

            // Create the destination directory if it does not exist
            if (Directory.Exists(destinationDir)) Directory.Delete(destinationDir, recursive: true);
            Directory.CreateDirectory(destinationDir);

            // Copy all files
            foreach (string file in Directory.GetFiles(sourceDir))
            {
                string fileName = Path.GetFileName(file);
                string destFile = Path.Combine(destinationDir, fileName);
                File.Copy(file, destFile, overwrite);
            }

            // Copy all subdirectories
            foreach (string subDir in Directory.GetDirectories(sourceDir))
            {
                string subDirName = Path.GetFileName(subDir);
                string destSubDir = Path.Combine(destinationDir, subDirName);
                CopyDirectory(subDir, destSubDir, overwrite);
            }
        }




        private void MenuSave_Click(object sender, EventArgs e)
        {
            SaveInputSite(); // to @"Inter\Site_input.csv"

            // Open the SaveFileDialog to get the file path
            using (SaveFileDialog saveFileDialog = new SaveFileDialog())
            {
                saveFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*";
                saveFileDialog.DefaultExt = "csv";
                saveFileDialog.AddExtension = true;
                saveFileDialog.Title = "Save Input CSV File";

                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    string filePath = saveFileDialog.FileName;
                    //SaveInputSite(filePath);

                    string sourceFilePath = @"Inter\Site_input.csv"; // Source file path                    
                    File.Copy(sourceFilePath, filePath, overwrite: true);
                }
            }


        }

       
        private void btClimate_Click(object sender, EventArgs e)
        {
            OpenFileDialog ClimateDialog = new OpenFileDialog();
            DialogResult result = ClimateDialog.ShowDialog();
            if (result == DialogResult.OK)
            {
                tbClimateFile.Text = ClimateDialog.FileName;

            }
        }

        private void MenuUserGuide_Click(object sender, EventArgs e)
        {
            //string currentDirectory = Directory.GetCurrentDirectory();
            // Specify the path to user guide PDF file
            string pdfFilePath = @".\Inter\LANDIS-II-Site User Guide.pdf";

            //MessageBox.Show($"Current Directory: {pdfFilePath}", "Message");
            try
            {

                // Open the PDF file using the default application
                Process.Start(new ProcessStartInfo
                {
                    FileName = pdfFilePath,
                    UseShellExecute = true // Ensures the file opens with the default viewer
                });
            }
            catch (Exception ex)
            {
                // Handle errors (e.g., file not found)
                MessageBox.Show($"An error occurred: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // Show a MessageBox with "About" information
            MessageBox.Show(
                "LANDIS-II-Site Tool Version 3.0\n Brian R. Miranda; Brian R.Sturtevant; Zaixing Zhou" +
                "\n© 2024 USDA Forest Service",
                "About",
                MessageBoxButtons.OK,
                MessageBoxIcon.Information
                );
        }

        private void MenuSaveOutput_Click(object sender, EventArgs e)
        {
            // Get the output directory where all output files generated by Landis-ii model
            string OutputDirectory = @".\Output";


            // set current directory as default
            string defaultPath = Directory.GetCurrentDirectory();

            FolderBrowserDialog SaveResultsDialog = new FolderBrowserDialog();
            SaveResultsDialog.Description = "Select a folder to save your files";
            SaveResultsDialog.SelectedPath = defaultPath;

            DialogResult result = SaveResultsDialog.ShowDialog();
            if (result == DialogResult.OK)
            {
                string SaveResultsDir = SaveResultsDialog.SelectedPath;

                SaveResultsDir = SaveResultsDir + "\\Output" ;

                CopyDirectory(OutputDirectory, SaveResultsDir);


                //MessageBox.Show($"Current Directory: {SaveResultsDirectory}", "Message");

            }

        }


        // initialize cbEcoPara;  // customize

        private void InitializeCbEcoPara()
        {
            // set default values for 

            // read the data file
            string filePath = @".\Inter\Site_EcoregionParameters.txt"; // Path to the text file

            if (File.Exists(filePath))
            {
                // Clear any existing items in the ComboBox
                cbEcoPara.Items.Clear();

                // Read all lines from the file
                string[] lines = File.ReadAllLines(filePath);

                // Skip the first two lines
                for (int i = 2; i < lines.Length; i++)
                {
                    cbEcoPara.Items.Add(lines[i].Trim()); // Add remaining lines
                }


                cbEcoPara.Sorted = true; // Automatically sorts items alphabetically
            }
            else
            {
                MessageBox.Show($"{filePath} does not exist.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }





            cbEcoPara.SelectedIndex = 0;  // customize


        }


        private void btAddEcoPara_Click(object sender, EventArgs e)
        {

            string rowName = cbEcoPara.Text;



            if (string.IsNullOrWhiteSpace(rowName))
            {
                // Add a new column to the DataGridView
                dataGridViewEcoPara.Rows.Add(rowName, "");
            }
            else
            {
                string[] words = rowName.Split(new[] { ' ', '\t', '\n' }, StringSplitOptions.RemoveEmptyEntries);
                dataGridViewEcoPara.Rows.Add(words[0], words[1]);
            }



        }


        private void btDeleteEcoPara_Click(object sender, EventArgs e)
        {
            // Check if a row is selected
            if (dataGridViewEcoPara.SelectedRows.Count > 0)
            {
                // Delete the selected rows
                foreach (DataGridViewRow row in dataGridViewEcoPara.SelectedRows)
                {
                    if (!row.IsNewRow) // Ensure it is not the "new row" placeholder
                    {
                        dataGridViewEcoPara.Rows.Remove(row);
                    }
                }

                // Update row numbers after deletion
                //UpdateRowNumbers();
            }
            else
            {
                MessageBox.Show("Please select a row to delete.", "Delete Row", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }

        }


        // initialize cbSppGenericPara
        private void InitializeCbSppGenericPara()
        {
            // set default values for cbSppGenericPara

            // read the data file
            string filePath = @".\Inter\Site_Generic_Pnet.txt"; // Path to the text file

            if (File.Exists(filePath))
            {
                // Clear any existing items in the ComboBox
                cbSppGenericPara.Items.Clear();

                // Read all lines from the file
                string[] lines = File.ReadAllLines(filePath);

                // Skip the first two lines
                for (int i = 2; i < lines.Length; i++)
                {
                    cbSppGenericPara.Items.Add(lines[i].Trim()); // Add remaining lines
                }


                cbSppGenericPara.Sorted = true; // Automatically sorts items alphabetically
            }
            else
            {
                MessageBox.Show($"{filePath} does not exist.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            cbSppGenericPara.SelectedIndex = 0;  // customize


        }

        private void btAddSpeciesGenericPara_Click(object sender, EventArgs e)
        {
            string rowName = cbSppGenericPara.Text;



            if (string.IsNullOrWhiteSpace(rowName))
            {
                // Add a new column to the DataGridView
                dataGridViewSppGeneric.Rows.Add(rowName, "");
            }
            else
            {
                string[] words = rowName.Split(new[] { ' ', '\t', '\n' }, StringSplitOptions.RemoveEmptyEntries);
                dataGridViewSppGeneric.Rows.Add(words[0], words[1]);
            }


        }

        private void btDeleteSppGeneric_Click(object sender, EventArgs e)
        {
            // Check if a row is selected
            if (dataGridViewSppGeneric.SelectedRows.Count > 0)
            {
                // Delete the selected rows
                foreach (DataGridViewRow row in dataGridViewSppGeneric.SelectedRows)
                {
                    if (!row.IsNewRow) // Ensure it is not the "new row" placeholder
                    {
                        dataGridViewSppGeneric.Rows.Remove(row);
                    }
                }

                // Update row numbers after deletion
                //UpdateRowNumbers();
            }
            else
            {
                MessageBox.Show("Please select a row to delete.", "Delete Row", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }


        }

        private void btAddSppLifeHistoryPara_Click(object sender, EventArgs e)
        {

            // Prompt user for column name
            string columnName = Prompt("Enter parameter name:", "Add Parameter");

            if (!string.IsNullOrEmpty(columnName))
            {
                // Add a new column to the DataGridView
                dataGridViewSppLifeHistory.Columns.Add(columnName, columnName);
            }


        }

        private string Prompt(string text, string caption)
        {
            // Create a prompt dialog to get input from the user
            Form prompt = new Form
            {
                Width = 400,
                Height = 150,
                Text = caption
            };

            System.Windows.Forms.Label textLabel = new System.Windows.Forms.Label { Left = 20, Top = 20, Text = text, AutoSize = true };
            TextBox inputBox = new TextBox { Left = 20, Top = 50, Width = 340 };
            Button confirmationButton = new Button
            {
                Text = "OK",
                Left = 270,
                Width = 90,
                Top = 80,
                DialogResult = DialogResult.OK
            };

            confirmationButton.Click += (sender, e) => { prompt.Close(); };

            prompt.Controls.Add(textLabel);
            prompt.Controls.Add(inputBox);
            prompt.Controls.Add(confirmationButton);
            prompt.AcceptButton = confirmationButton;

            return prompt.ShowDialog() == DialogResult.OK ? inputBox.Text : null;
        }



        // initialize dataGridViewSppLifeHistory
        private void InitializeDataGridViewSppLifeHistory()
        {
            // set default values for cbSppGenericPara

            // read the data file
            string filePath = @".\Inter\Site_Species_Landis.txt"; // Path to the text file

            if (File.Exists(filePath))
            {
                // Clear any existing items in the ComboBox
                //cbSppGenericPara.Items.Clear();

                // Read all lines from the file
                string[] lines = File.ReadAllLines(filePath);

                string[] columns = (lines[1].Trim()).Split(new[] { ' ', '\t', '\n' }, StringSplitOptions.RemoveEmptyEntries);

                foreach (string col in columns)
                {
                    dataGridViewSppLifeHistory.Columns.Add(col, col);
                }
                // Skip the first two lines
                for (int i = 2; i < lines.Length; i++)
                {
                    string[] records = (lines[i].Trim()).Split(new[] { ' ', '\t', '\n' }, StringSplitOptions.RemoveEmptyEntries);
                    dataGridViewSppLifeHistory.Rows.Add(records);
                }

            }
            else
            {
                MessageBox.Show($"{filePath} does not exist.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }



        }

        private void btDeleteSppLifeHistoryPara_Click(object sender, EventArgs e)
        {
            if (dataGridViewSppLifeHistory.SelectedCells.Count > 0)
            {
                int selectedColumnIndex = dataGridViewSppLifeHistory.SelectedCells[0].ColumnIndex;

                if (selectedColumnIndex >= 0)
                {
                    string columnName = dataGridViewSppLifeHistory.Columns[selectedColumnIndex].Name;
                    dataGridViewSppLifeHistory.Columns.RemoveAt(selectedColumnIndex);
                    MessageBox.Show($"Column '{columnName}' has been deleted.");
                }
            }
            else
            {
                MessageBox.Show("No column selected.");
            }

        }

        private void btAddSppLifeHistorySpp_Click(object sender, EventArgs e)
        {
            dataGridViewSppLifeHistory.Rows.Add();
        }

        private void btDeleteSppLifeHistorySpp_Click(object sender, EventArgs e)
        {
            // Check if a row is selected
            if (dataGridViewSppLifeHistory.SelectedRows.Count > 0)
            {
                // Delete the selected rows
                foreach (DataGridViewRow row in dataGridViewSppLifeHistory.SelectedRows)
                {
                    if (!row.IsNewRow) // Ensure it is not the "new row" placeholder
                    {
                        dataGridViewSppLifeHistory.Rows.Remove(row);
                    }
                }

                // Update row numbers after deletion
                //UpdateRowNumbers();
            }
            else
            {
                MessageBox.Show("Please select a row to delete.", "Delete Row", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }

        }

        // initialize dataGridViewSppEcophysi
        private void InitializeDataGridViewSppEcophysi()
        {
            // set default values for cbSppGenericPara

            // read the data file
            string filePath = @".\Inter\Site_Species_Pnet.txt"; // Path to the text file

            if (File.Exists(filePath))
            {

                // Read all lines from the file
                string[] lines = File.ReadAllLines(filePath);

                string[] columns = (lines[1].Trim()).Split(new[] { ' ', '\t', '\n' }, StringSplitOptions.RemoveEmptyEntries);

                foreach (string col in columns)
                {
                    dataGridViewSppEcophysi.Columns.Add(col, col);
                }
                // Skip the first two lines
                for (int i = 2; i < lines.Length; i++)
                {
                    string[] records = (lines[i].Trim()).Split(new[] { ' ', '\t', '\n' }, StringSplitOptions.RemoveEmptyEntries);
                    dataGridViewSppEcophysi.Rows.Add(records);
                }

            }
            else
            {
                MessageBox.Show($"{filePath}does not exist.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }



        }

        private void btAddSppEcophysiPara_Click(object sender, EventArgs e)
        {

            // Prompt user for column name
            string columnName = Prompt("Enter parameter name:", "Add Parameter");

            if (!string.IsNullOrEmpty(columnName))
            {
                // Add a new column to the DataGridView
                dataGridViewSppEcophysi.Columns.Add(columnName, columnName);
            }

        }

        private void btDeleteSppEcophysiPara_Click(object sender, EventArgs e)
        {
            if (dataGridViewSppEcophysi.SelectedCells.Count > 0)
            {
                int selectedColumnIndex = dataGridViewSppEcophysi.SelectedCells[0].ColumnIndex;

                if (selectedColumnIndex >= 0)
                {
                    string columnName = dataGridViewSppEcophysi.Columns[selectedColumnIndex].Name;
                    dataGridViewSppEcophysi.Columns.RemoveAt(selectedColumnIndex);
                    MessageBox.Show($"Column '{columnName}' has been deleted.");
                }
            }
            else
            {
                MessageBox.Show("No column selected.");
            }
        }

        private void btAddSppEcophysiSpp_Click(object sender, EventArgs e)
        {
            dataGridViewSppEcophysi.Rows.Add();
        }

        private void btDeleteSppEcophysiSpp_Click(object sender, EventArgs e)
        {
            // Check if a row is selected
            if (dataGridViewSppEcophysi.SelectedRows.Count > 0)
            {
                // Delete the selected rows
                foreach (DataGridViewRow row in dataGridViewSppEcophysi.SelectedRows)
                {
                    if (!row.IsNewRow) // Ensure it is not the "new row" placeholder
                    {
                        dataGridViewSppEcophysi.Rows.Remove(row);
                    }
                }

                // Update row numbers after deletion
                //UpdateRowNumbers();
            }
            else
            {
                MessageBox.Show("Please select a row to delete.", "Delete Row", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        public static List<Dictionary<string, object>> ReadCsvAsDictionary(string filePath)
        {
            var records = new List<Dictionary<string, object>>();

            if (File.Exists(filePath))
            {
                string[] lines = File.ReadAllLines(filePath);

                // Read the headers from the first line
                string[] headers = lines[0].Split(',');

                // Process each data row
                for (int i = 1; i < lines.Length; i++)
                {
                    string[] values = lines[i].Split(',');
                    var record = new Dictionary<string, object>();

                    for (int j = 0; j < headers.Length; j++)
                    {
                        record[headers[j]] = values[j];
                    }

                    records.Add(record);
                }
            }
            else
            {
                MessageBox.Show("CSV file not found.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            return records;
        }


        List<Dictionary<string, object>> RecordsSite = new List<Dictionary<string, object>>();
        private void LoadResultSite()
        {
            // Read data from the CSV file
            string filePath= @"Output\Site1\Site.csv";
            if (cbSuccessionOption.SelectedIndex == 0) 
            {
                filePath = @"Output\PNEToutputsites\Site1\Site.csv"; // Path to the file
            }
            if (cbSuccessionOption.SelectedIndex == 1)
            {
                filePath = @"Output\Site1\Site.csv"; // Path to the file
            }

            RecordsSite = ReadCsvAsDictionary(filePath);

        }

        private GraphPane CreateGraph(ZedGraphControl zgc, string yLabel, List<Dictionary<string, object>> records, string Xvar, string Yvar, Color c)
        {
            GraphPane myPane = zgc.GraphPane;

            // Set the titles and axis labels
            
            myPane.XAxis.Title.Text = "Time";
            myPane.YAxis.Title.Text = yLabel;

            PointPairList list = new PointPairList();


            foreach (var record in records)
            {
                double _x, _y;
                double.TryParse((string)record[Xvar], out _x);
                double.TryParse((string)record[Yvar], out _y);
                //PointPair _pointPair = new PointPair(double.TryParse(Value, out OutVal)(]), (double)record[Yvar]);
                list.Add(_x, _y);

            }
            //c = Color.FromArgb(2, 0, 0, 0);
            LineItem curve = myPane.AddCurve(Yvar, list, c, SymbolType.None);

            zgc.AxisChange();
            zgc.Invalidate();
            return myPane;
        }

        private void checkedListBoxClimate_ItemCheck(object sender, ItemCheckEventArgs e)
        {          
            ZedGraphControl zgc = zedGraphControlClimate;  // carbon zgc pane
            CheckedListBox myclb = checkedListBoxClimate;    // carbon checked List Box

            var mypane = zgc.GraphPane;            
            mypane.Title.Text = string.Empty;

            string Xvar = "Time";
            // Check which item is toggled
            string selectedItem = myclb.Items[e.Index].ToString();

            if (e.NewValue == CheckState.Checked)
            {
                // Show Temperature in Chart
                Color c = colorPalette[e.Index];
                mypane = CreateGraph(zgc, selectedItem, RecordsSite, Xvar, selectedItem, c);
            }
            else
            {
                // Clear Temperature Data
                CurveItem curve = mypane.CurveList[selectedItem];
                // Remove the curve from the list
                mypane.CurveList.Remove(curve);

                // Refresh the graph
                zgc.AxisChange();
                zgc.Invalidate();

            }

        }

        Color[] colorPalette = new Color[]
        {
               Color.Red,
               Color.Blue,
               Color.Green,
               Color.Orange,
               Color.Purple,
               Color.Black,
               Color.Brown,
               Color.Gray,
               Color.Navy,
               Color.Magenta
        };
        private void checkedListBoxCarbon_ItemCheck(object sender, ItemCheckEventArgs e)
        {
            ZedGraphControl zgc = zedGraphControlCarbon;  // carbon zgc pane
            CheckedListBox myclb = checkedListBoxCarbon;    // carbon checked List Box

            var mypane = zgc.GraphPane;
            
            mypane.Title.Text = string.Empty;

            string Xvar = "Time";

            // Check which item is toggled
            string selectedItem = myclb.Items[e.Index].ToString();

            if (e.NewValue == CheckState.Checked)
            {
                // Show Temperature in Chart
                Color c = colorPalette[e.Index];
                mypane = CreateGraph(zgc, selectedItem, RecordsSite, Xvar, selectedItem, c);
            }
            else
            {
                // Clear Temperature Data
                CurveItem curve = mypane.CurveList[selectedItem];
                // Remove the curve from the list
                mypane.CurveList.Remove(curve);

                // Refresh the graph
                zgc.AxisChange();
                zgc.Invalidate();

            }

        }


        private void checkedListBoxWater_ItemCheck(object sender, ItemCheckEventArgs e)
        {
            ZedGraphControl zgc = zedGraphControlWater;  // carbon zgc pane
            CheckedListBox myclb = checkedListBoxWater;    // carbon checked List Box

            var mypane = zgc.GraphPane;

            mypane.Title.Text = string.Empty;

            string Xvar = "Time";

            // Check which item is toggled
            string selectedItem = myclb.Items[e.Index].ToString();

            if (e.NewValue == CheckState.Checked)
            {
                // Show Temperature in Chart
                Color c = colorPalette[e.Index];
                mypane = CreateGraph(zgc, selectedItem, RecordsSite, Xvar, selectedItem, c);
            }
            else
            {
                // Clear Temperature Data
                CurveItem curve = mypane.CurveList[selectedItem];
                // Remove the curve from the list
                mypane.CurveList.Remove(curve);

                // Refresh the graph
                zgc.AxisChange();
                zgc.Invalidate();

            }

        }

        private void btClearGraph_Click(object sender, EventArgs e)
        {
            /*
                        zedGraphControlClimate.GraphPane.CurveList.Clear();
                        zedGraphControlCarbon.GraphPane.CurveList.Clear();

                        zedGraphControlClimate.Refresh();
                        zedGraphControlCarbon.Refresh();
            */

            //BuildLandisInput(); // ZZX 


            for (int i = 0; i < checkedListBoxClimate.Items.Count; i++)
            {
                checkedListBoxClimate.SetItemChecked(i, false); // Uncheck the item
            }
            for (int i = 0; i < checkedListBoxCarbon.Items.Count; i++)
            {
                checkedListBoxCarbon.SetItemChecked(i, false); // Uncheck the item
            }
        }

        private void SaveInputSite(string filePath = @"Inter\Site_input.csv")
        {
            //filePath = "Inter\Site_input.csv"; // Path to the file

            using (StreamWriter writer = new StreamWriter(filePath))
            {
                // Write the header row
                string csvheader = "LANDIS-II-Site-input";
                string strseperater="<<<<<<<<<<<<<<<<<";
                writer.WriteLine(csvheader);


                ///////////////// Succession Extension
                writer.WriteLine(strseperater + "Succession Extension");
                writer.WriteLine("SuccessionExtension,"+ cbSuccessionOption.Text);

                ///////////////// Disturbance Extensions
                writer.WriteLine(strseperater + "Disturbance Extension");
                foreach (var item in checkedListBoxDisturbance.CheckedItems)
                {
                    string disturb="Disturb";
                    string value = item.ToString();
                    
                    int index = checkedListBoxDisturbance.Items.IndexOf(value);
                    //int index = item.IndexOf(value);
                    string strout = disturb + index.ToString() + "," + value;
                    writer.WriteLine(strout);
                }

                ////////////////// Simulation Parameters
                writer.WriteLine(strseperater + "Simulation Parameters");

                writer.WriteLine("SimulationYears," + tbSimYears.Text);  // simulation years
                writer.WriteLine("StartYear," + tbStartYr.Text);  // 
                writer.WriteLine("TimeStep," + tbTimestep.Text);  // 
                writer.WriteLine("SeedingAlgorithm," + cbSeedingAlg.Text);  // 

                string strtemp = cbRandSeed.Checked ? "Yes" : "No";
                writer.WriteLine("RandomSeedCheck," + strtemp); 
                writer.WriteLine("RandomSeedSet," + tbRandSeed.Text);  // 

                strtemp = cbReplicate.Checked ? "Yes" : "No";
                writer.WriteLine("ReplicateCheck," + strtemp);
                writer.WriteLine("ReplicateNum," + tbReplicateNum.Text);  // 

                /////////////////save Ecoregion data
                writer.WriteLine(strseperater + "Ecoregion Parameters");
                writer.WriteLine("ClimateFile," + tbClimateFile.Text);  //
                writer.WriteLine("Latitude," + tbLatitude.Text);  //
                
                SaveDataGridViewToCsv(writer, dataGridViewEcoPara,false);  // save all table data

                /////////////////save Initial communities 
                writer.WriteLine(strseperater + "Initial communities");
                SaveDataGridViewToCsv(writer, dataGridViewInitialComm);  // save all table data


                /////////////////save species generic data
                writer.WriteLine(strseperater + "Species Generic Parameters");
                SaveDataGridViewToCsv(writer, dataGridViewSppGeneric,false);  // save all table data


                ///////////////// save species life history data from the table
                writer.WriteLine(strseperater + "Species Life History Parameters");
                SaveDataGridViewToCsv(writer, dataGridViewSppLifeHistory);

                //////////////// save species Ecophysiological data from the table
                writer.WriteLine(strseperater + "Species Ecophysiological Parameters");
                SaveDataGridViewToCsv(writer, dataGridViewSppEcophysi);


 
            }
            //MessageBox.Show("Data saved successfully!", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);

        }

        private void SaveDataGridViewToCsv(StreamWriter writer, DataGridView dataGridView, Boolean writeheader = true,string sep = ",")
        {

            // Write the header row
            if (writeheader)
            {
                for (int i = 0; i < dataGridView.ColumnCount; i++)
                {
                    writer.Write(dataGridView.Columns[i].Name);
                    if (i < dataGridView.ColumnCount - 1) writer.Write(sep);
                }
                writer.WriteLine();

            }


            // Write the data rows
            foreach (DataGridViewRow row in dataGridView.Rows)
            {
                if (!row.IsNewRow) // Skip the placeholder row
                {
                    for (int i = 0; i < dataGridView.ColumnCount; i++)
                    {
                        writer.Write(row.Cells[i].Value);
                        if (i < dataGridView.ColumnCount - 1) writer.Write(sep);
                    }
                    writer.WriteLine();
                }
            }


        }

        private void MenuOpen_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*",
                Title = "Open CSV File"
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                LoadInputFromCsv(openFileDialog.FileName);
            }
        }

        private void LoadInputFromCsv(string filePath)
        {
            try
            {
                string[] lines = File.ReadAllLines(filePath);
                
                
                // Succession extension
                string[] values = lines[2].Split(','); // succession extension
                cbSuccessionOption.SelectedItem = values[1];

                string searchPhrase = "<<";



                // Disturbance
                int ii=0;  // number of records
                int startline = 4;
                int index = 0;
                for (int i = startline; i < lines.Length; i++)
                {
                    if (lines[i].Contains(searchPhrase))
                    {
                        startline = i+1;  // new start line
                        break;
                    } 

                    values = lines[i].Split(',');
                    index = checkedListBoxDisturbance.Items.IndexOf(values[1]);
                    if (index >= 0)
                    {
                        checkedListBoxDisturbance.SetItemChecked(index, true);
                    }
                    ii++;
                }

                ii = 0;
                // Simulation Parameters
                for (int i = startline; i < lines.Length; i++)
                {
                    if (lines[i].Contains(searchPhrase))
                    {
                        startline = i+1;  // new start line
                        break;
                    }

                    values = lines[i].Split(',');
                    if (values[0] == "SimulationYears") tbSimYears.Text = values[1];
                    if (values[0] == "StartYear") tbStartYr.Text = values[1];
                    if (values[0] == "TimeStep") tbTimestep.Text = values[1];

                    if (values[0] == "SeedingAlgorithm") cbSeedingAlg.SelectedItem = values[1];
                    if (values[0] == "RandomSeedCheck") cbRandSeed.Checked = values[1].Equals("Yes");
                    if (values[0] == "RandomSeedSet") tbRandSeed.Text = values[1];
                    if (values[0] == "ReplicateCheck") cbReplicate.Checked = values[1].Equals("Yes");
                    if (values[0] == "ReplicateNum") tbReplicateNum.Text = values[1];

                }

                //var record = new Dictionary<string, object>();
               
                // Ecoregion Parameters

                dataGridViewEcoPara.Rows.Clear();
                for (int i = startline; i < lines.Length; i++)
                {
                    if (lines[i].Contains(searchPhrase))
                    {
                        startline = i + 1;  // new start line
                        break;
                    }

                    values = lines[i].Split(',');
                    if (values[0] == "ClimateFile") tbClimateFile.Text = values[1];
                    if (values[0] == "Latitude") tbLatitude.Text = values[1];

                    if (i > startline + 1) dataGridViewEcoPara.Rows.Add(values); // skip two lines above     

                }

                // Initial communities

                dataGridViewInitialComm.Rows.Clear();    
                dataGridViewInitialComm.Columns.Clear();

                for (int i = startline; i < lines.Length; i++)
                {
                    if (lines[i].Contains(searchPhrase))
                    {
                        startline = i + 1;  // new start line
                        break;
                    }

                    values = lines[i].Split(',');
                    if (i == startline)
                    {
                        foreach (string col in values)
                        {
                            dataGridViewInitialComm.Columns.Add(col, col);
                        }// first line is the headers for column names
                    }
                    else dataGridViewInitialComm.Rows.Add(values);
                }

                // Species Generic Parameters

                dataGridViewSppGeneric.Rows.Clear();
                for (int i = startline; i < lines.Length; i++)
                {
                    if (lines[i].Contains(searchPhrase))
                    {
                        startline = i + 1;  // new start line
                        break;
                    }

                    values = lines[i].Split(',');
                    dataGridViewSppGeneric.Rows.Add(values); 

                }


                // Species Life History Parameters

                dataGridViewSppLifeHistory.Rows.Clear();
                dataGridViewSppLifeHistory.Columns.Clear();

                for (int i = startline; i < lines.Length; i++)
                {
                    if (lines[i].Contains(searchPhrase))
                    {
                        startline = i + 1;  // new start line
                        break;
                    }

                    values = lines[i].Split(',');
                    if (i == startline) 
                    {
                        foreach (string col in values)
                        {
                            dataGridViewSppLifeHistory.Columns.Add(col, col);
                        }// first line is the headers for column names
                    } 
                    else dataGridViewSppLifeHistory.Rows.Add(values);
                }


                // Species Ecophysiological Parameters

                dataGridViewSppEcophysi.Rows.Clear();
                dataGridViewSppEcophysi.Columns.Clear();

                for (int i = startline; i < lines.Length; i++)
                {
                    if (lines[i].Contains(searchPhrase))
                    {
                        startline = i + 1;  // new start line
                        break;
                    }

                    values = lines[i].Split(',');
                    if (i == startline)
                    {
                        foreach (string col in values)
                        {
                            dataGridViewSppEcophysi.Columns.Add(col, col);
                        }// first line is the headers for column names
                    }
                    else dataGridViewSppEcophysi.Rows.Add(values);

                } 

               // MessageBox.Show(zzx, "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);

            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading data: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        private string InputDir(ComboBox cbSuccession) 
        { 
        
            string InputSuccession = cbSuccession.Text;
            string InputDirectory = @".\Input";
            InputDirectory = InputDirectory + "\\" + InputSuccession;
            return InputDirectory;

        }
        private string InterDir(ComboBox cbSuccession)
        {

            string InputSuccession = cbSuccession.Text;
            string InterDirectory = @".\Inter";
            InterDirectory = InterDirectory + "\\" + InputSuccession;
            return InterDirectory;

        }
        private void MenuBuildLandisInput_Click(object sender, EventArgs e)
        {

            BuildLandisInput(); // build the input package


            string strSuccession = cbSuccessionOption.Text;  // get the current succesion Extension            

            string InputDirectory = InputDir(cbSuccessionOption);// get the current succesion input directory


            // set current directory as default
            string defaultPath = Directory.GetCurrentDirectory();

            FolderBrowserDialog SaveResultsDialog = new FolderBrowserDialog();
            SaveResultsDialog.Description = "Select a folder to save your files";
            SaveResultsDialog.SelectedPath = defaultPath;
            //SaveResultsDialog.

            DialogResult result = SaveResultsDialog.ShowDialog();
            if (result == DialogResult.OK)
            {
                string SaveResultsDir = SaveResultsDialog.SelectedPath;
                SaveResultsDir = SaveResultsDir + "\\" + strSuccession;

                Directory.CreateDirectory(SaveResultsDir);

                // Copy all files
                foreach (string file in Directory.GetFiles(InputDirectory))
                {
                    string fileName = Path.GetFileName(file);
                    string destFile = Path.Combine(SaveResultsDir, fileName);
                    File.Copy(file, destFile, true);
                }  
            }

            

        }

        private void BuildLandisInput()
        {
           BuildPnetSuccession(cbSuccessionOption);

        }

        private void BuildPnetSuccessionScenario(string InputDirectory)
        {
            //////////////////// build site_Scenario.txt
            string fileName = "site_Scenario.txt";
            string filePath = Path.Combine(InputDirectory, fileName);
            using (StreamWriter writer = new StreamWriter(filePath))
            {
                // Write the header row
                writer.WriteLine("LandisData  Scenario");

                writer.WriteLine(); // empty line

                writer.WriteLine($"Duration  {tbSimYears.Text}");

                writer.WriteLine(); // empty line

                writer.WriteLine("Species         site_Species.txt");
                writer.WriteLine("Ecoregions      site_Ecoregions.txt");
                writer.WriteLine("EcoregionsMap   site_EcoregionsMap.img");
                writer.WriteLine("CellLength  100 << meters, 100 x 100 m = 1 ha");

                writer.WriteLine(); // empty line

                writer.WriteLine(">> Succession Extension     Initialization File");
                writer.WriteLine(">> --------------------     -------------------");
                writer.WriteLine(cbSuccessionOption.Text + "    site_Succession.txt");

                writer.WriteLine(); // empty line
                writer.WriteLine(">> Disturbance Extensions     Initialization File");
                writer.WriteLine(">> --------------------     -------------------");
                foreach (var item in checkedListBoxDisturbance.CheckedItems)
                {
                    string value = item.ToString();
                    string strout = "\"" + value + "\"" + "     " + "site_" + value + ".txt";
                    writer.WriteLine(strout);
                }

                if (cbRandSeed.Checked) writer.WriteLine($"RandomNumberSeed  {tbRandSeed.Text}");
                ///////////////////////////////////// end of site_Scenario.txt
                ///
            }

         }
        private void BuildPnetSuccessionSuccession(string InputDirectory)
        {
            //////////////////// build site_Succession.txt
            string fileName = "site_Succession.txt";
            string filePath = Path.Combine(InputDirectory, fileName);
            using (StreamWriter writer = new StreamWriter(filePath))
            {
                // Write the header row
                writer.WriteLine("LandisData  PnET-Succession");

                writer.WriteLine(); // empty line

                writer.WriteLine("PnET-Succession		Value");
                writer.WriteLine(">>-------------------------------------");
                writer.WriteLine($"Timestep          {tbTimestep.Text}");
                writer.WriteLine($"StartYear         {tbStartYr.Text}");
                writer.WriteLine($"SeedingAlgorithm  {cbSeedingAlg.Text}");
                writer.WriteLine($"Latitude          {tbLatitude.Text}");

                writer.WriteLine(); // empty line
                
                writer.WriteLine("PNEToutputsites		site_PNEToutputsites.txt");

                writer.WriteLine(); // empty line

                writer.WriteLine("InitialCommunities      site_InitialCommunities.txt");
                writer.WriteLine("InitialCommunitiesMap   site_InitialCommunitiesMap.img");

                writer.WriteLine(); // empty line
                
                writer.WriteLine("PnETGenericParameters		site_PnETGenericParameters.txt");
                writer.WriteLine("PnETSpeciesParameters		site_PnETSpeciesParameters.txt");


                writer.WriteLine(); // empty line

                writer.WriteLine("EcoregionParameters 	site_EcoregionParameters.txt");

                ///////////////////////////////////// end of site_Succession.txt
                ///
            }

        }

        private void BuildPnetSuccessionSpecies(string InputDirectory)
        {
            //////////////////// build site_Species.txt
            string fileName = "site_Species.txt";
            string filePath = Path.Combine(InputDirectory, fileName);
            using (StreamWriter writer = new StreamWriter(filePath))
            {
                // Write the header row
                writer.WriteLine("LandisData  Species");

                writer.WriteLine(); // empty line

                writer.WriteLine(">>species Longevity sex_Maturity shade_Tol. fire_Tol. seed_disper_Effective seed_disp_Maximum veg_ReprodProb sprout_age_Min sprout_age_Max post_fire_Regen");
                writer.WriteLine(">>---------------------------------------------------");


                SaveDataGridViewToCsv(writer, dataGridViewSppLifeHistory,false,"   ");                

                ///////////////////////////////////// end of site_Species.txt
                ///
            }

        }


        private void BuildPnetSuccessionPnETSpeciesParameters(string InputDirectory)
        {
            //////////////////// build site_PnETSpeciesParameters.txt
            string fileName = "site_PnETSpeciesParameters.txt";
            string filePath = Path.Combine(InputDirectory, fileName);
            using (StreamWriter writer = new StreamWriter(filePath))
            {

                    // Write the header row
                writer.WriteLine("LandisData  PnETSpeciesParameters");

                writer.WriteLine(); // empty line

                //writer.WriteLine(">>species Longevity sex_Maturity shade_Tol. fire_Tol. seed_disper_Effective seed_disp_Maximum veg_ReprodProb sprout_age_Min sprout_age_Max post_fire_Regen");
                //writer.WriteLine(">>---------------------------------------------------");


                SaveDataGridViewToCsv(writer, dataGridViewSppEcophysi, true, "   ");
            }

            ///////////////////////////////////// end of site_PnETSpeciesParameters.txt
        }


        private void BuildPnetSuccessionInitialComm(string InputDirectory)
        {
            //////////////////// build site_InitialCommunities.txt
            string fileName = "site_InitialCommunities.txt";
            string filePath = Path.Combine(InputDirectory, fileName);
            using (StreamWriter writer = new StreamWriter(filePath))
            {
                // Write the header row
                writer.WriteLine("LandisData  \"Initial Communities\"");  // Note it is not "InitialCommunities" as ususal

                writer.WriteLine(); // empty line

                writer.WriteLine("MapCode 10");               


                SaveDataGridViewToCsv(writer, dataGridViewInitialComm, false, "   ");

                ///////////////////////////////////// end of BuildPnetSuccessionInitialComm.txt
                ///
            }

        }

        private void BuildPnetSuccessionClimate(string InputDirectory)
        {
            //////////////////// build site_climate.txt
            string fileName = "site_climate.txt";
            string filePath = Path.Combine(InputDirectory, fileName);

            string Sourcefile = tbClimateFile.Text;
            
            File.Copy(Sourcefile, filePath, true);

            ///////////////////////////////////// end of site_climate.txt
        }

        private void BuildPnetSuccessionEcoregionPara(string InputDirectory)
        {
            //////////////////// build site_EcoregionParameters.txt
            string fileName = "site_EcoregionParameters.txt";
            string filePath = Path.Combine(InputDirectory, fileName);
            using (StreamWriter writer = new StreamWriter(filePath))
            {

                // Write the header row
                writer.WriteLine("LandisData  EcoregionParameters");

                writer.WriteLine(); // empty line

                writer.WriteLine("EcoregionParameters	PrecLossFrac	climateFileName	SoilType	RootingDepth	LeakageFrac SnowSublimFrac");
                writer.WriteLine(">>---------------------------------------------------");


                //SaveDataGridViewToCsv(writer, dataGridViewSppEcophysi, true, "   ");
            }

            ///////////////////////////////////// end of site_PnETSpeciesParameters.txt
        }


        private void BuildPnetSuccessionGenericPara(string InputDirectory)
        {
            //////////////////// build site_PnETGenericParameters.txt
            string fileName = "site_PnETGenericParameters.txt";
            string filePath = Path.Combine(InputDirectory, fileName);
            using (StreamWriter writer = new StreamWriter(filePath))
            {

                // Write the header row
                writer.WriteLine("LandisData  PnETGenericParameters");

                writer.WriteLine(); // empty line

                writer.WriteLine("PnETGenericParameters		Value");
                SaveDataGridViewToCsv(writer, dataGridViewSppGeneric, false, "   ");
            }

            ///////////////////////////////////// end of site_PnETGenericParameters.txt
        }

        private void BuildPnetSuccession(ComboBox cbSuccession)
        {

            string InputDirectory = InputDir(cbSuccessionOption);// get the current succesion input directory

            BuildPnetSuccessionScenario(InputDirectory);
            BuildPnetSuccessionSuccession(InputDirectory);
            BuildPnetSuccessionSpecies(InputDirectory);
            BuildPnetSuccessionPnETSpeciesParameters(InputDirectory);
            BuildPnetSuccessionInitialComm(InputDirectory);
            BuildPnetSuccessionClimate(InputDirectory);
            //BuildPnetSuccessionEcoregionPara(InputDirectory);

            BuildPnetSuccessionGenericPara(InputDirectory);
            /*

            /////////////////save Ecoregion data

            SaveDataGridViewToCsv(writer, dataGridViewEcoPara, false);  // save all table data

            */

        }

        private void btAddCohortSpp_Click(object sender, EventArgs e)
        {
            dataGridViewInitialComm.Rows.Add();
        }

        private void btDeleteCohortSpp_Click(object sender, EventArgs e)
        {
            // Check if a row is selected
            if (dataGridViewInitialComm.SelectedRows.Count > 0)
            {
                // Delete the selected rows
                foreach (DataGridViewRow row in dataGridViewInitialComm.SelectedRows)
                {
                    if (!row.IsNewRow) // Ensure it is not the "new row" placeholder
                    {
                        dataGridViewInitialComm.Rows.Remove(row);
                    }
                }

                // Update row numbers after deletion
                //UpdateRowNumbers();
            }
            else
            {
                MessageBox.Show("Please select a row to delete.", "Delete Row", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }

        }

        private void btAddCohortAge_Click(object sender, EventArgs e)
        {
                        
            int colnum = dataGridViewInitialComm.Columns.Count;
            if (colnum > 1)
            {
                for (int i = 0; i< colnum - 1; i++)
                {
                    string headername = $"Age{i + 1}";
                    dataGridViewInitialComm.Columns[i + 1].HeaderText = headername;
                }
            
            }
            string columnName = $"Age{colnum}";
            dataGridViewInitialComm.Columns.Add(columnName, columnName);

           
        }

        private void btDeleteCohortAge_Click(object sender, EventArgs e)
        {
            if (dataGridViewInitialComm.SelectedCells.Count > 0)
            {
                int selectedColumnIndex = dataGridViewInitialComm.SelectedCells[0].ColumnIndex;

                if (selectedColumnIndex > 0)
                {
                    string columnName = dataGridViewInitialComm.Columns[selectedColumnIndex].Name;
                    dataGridViewInitialComm.Columns.RemoveAt(selectedColumnIndex);
                    MessageBox.Show($"Column '{columnName}' has been deleted.");
                }

                int colnum = dataGridViewInitialComm.Columns.Count;
                if (colnum > 1)
                {
                    for (int i = 0; i < colnum - 1; i++)
                    {
                        string headername = $"Age{i + 1}";
                        dataGridViewInitialComm.Columns[i + 1].HeaderText = headername;
                    }

                }

            }
            else
            {
                MessageBox.Show("No column or first column selected.");
            }

        }

        private void btAddReference_Click(object sender, EventArgs e)
        {
            /*

             OpenFileDialog openFileDialog = new OpenFileDialog
             {
                 Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*",
                 Title = "Open CSV File"
             };

             if (openFileDialog.ShowDialog() == DialogResult.OK)
             {
                 //LoadInputFromCsv(openFileDialog.FileName);
             }

             */
            tabControlGraphSite();

        }

        private void MenuBatchRun_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*",
                Title = "Open CSV File"
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                //LoadInputFromCsv(openFileDialog.FileName);
            }

        }

        // for Random seed
        private void cbRandSeed_CheckedChanged(object sender, EventArgs e)
        {
            // Set the TextBox to enabled/disabled based on CheckBox's checked state
            tbRandSeed.Enabled = cbRandSeed.Checked;
        }

        private void cbReplicate_CheckedChanged(object sender, EventArgs e)
        {
            // Set the TextBox to enabled/disabled based on CheckBox's checked state
            tbReplicateNum.Enabled = cbReplicate.Checked;
        }


        // for climate libary
        private void checkedListBoxExtensionOther_ItemCheck(object sender, ItemCheckEventArgs e)
        {
            // Check if the specific item ("Climate") is being checked/unchecked
            if (checkedListBoxExtensionOther.Items[e.Index].ToString() == "Climate")
            {
                // e.NewValue shows the *upcoming* state of the item (Checked or Unchecked)
                // Disable both TextBox and Button based on upcoming check state
                bool controlsEnabled = (e.NewValue != CheckState.Checked);
                btClimate.Enabled = controlsEnabled;
                tbClimateFile.Enabled = (e.NewValue != CheckState.Checked);
            }
        }

        // load the tab graphs variables
        private void tabControlGraphSite()
        {
            // set default values for cbSppGenericPara

            // read the data file
            string InterDirectory = InterDir(cbSuccessionOption);// get the current succesion inter directory
            string fileName = "Site_Site.csv";
            string filePath = Path.Combine(InterDirectory, fileName);
            Dictionary<string, string> sitevars = new Dictionary<string, string>();



            if (File.Exists(filePath))
            {
                string[] lines = File.ReadAllLines(filePath);

                // Read the keys from the first line
                string[] keys = lines[0].Trim().Split(',');
                string[] values = lines[1].Trim().Split(',');
                //sitevars.Add();
                // Process each data row
                for (int i = 1; i < keys.Length; i++)
                {
                    sitevars[keys[i]] = values[i];
 
                    //records.Add(record);
                }

                // populate climate tab
                // List of values to match
                List<string> valuesToFind = new List<string> {"1"};
                tabControlGraphSiteTab(sitevars, checkedListBoxClimate, valuesToFind);
                
                // populate carbon tab
                // List of values to match
                valuesToFind = new List<string> { "2" };   //         
                tabControlGraphSiteTab(sitevars, checkedListBoxCarbon, valuesToFind);

                // populate water tab
                // List of values to match
                valuesToFind = new List<string> { "3" };   // 
                tabControlGraphSiteTab(sitevars, checkedListBoxWater, valuesToFind);

                valuesToFind = new List<string> { "4" };   // 
                tabControlGraphSiteTab(sitevars, checkedListBoxNitrogen, valuesToFind);               
            }
            else
            {
                MessageBox.Show("CSV file not found.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }             
  
        }

        private void tabControlGraphSiteTab(Dictionary<string, string> sitevars, CheckedListBox checkedListBoxTab, List<string> valuesToFind) 
        {
            //List<string> valuesToFind = new List<string> { "1" };
            // Find keys whose values match the list
            var matchingKeys = sitevars
                .Where(pair => valuesToFind.Contains(pair.Value)) // Filter based on values
                .Select(pair => pair.Key) // Select the keys
                .ToList();
            // Clear the CheckedListBox
            checkedListBoxTab.Items.Clear();
            //checkedListBoxClimate.Items.Add(matchingKeys);
            // Add new items
            foreach (string item in matchingKeys)
            {
                checkedListBoxTab.Items.Add(item);
            }

        }

    }

}



