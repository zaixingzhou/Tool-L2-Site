using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using System.IO;
using ZedGraph;

using System.Windows.Forms;

namespace LANDIS_II_Site
{
    public partial class FormMain : Form
    {
        public FormMain()
        {
            InitializeComponent();

            // set default values for some components
            InitializeComponentPlus();

            // load site results
            LoadResultSite();
            // graph climate data
            // chart_climate(); // 
            //checkedListBox_ItemCheck(object sender, ItemCheckEventArgs e)


        }

        private void InitializeComponentPlus()
        {
            // set default values for some components

            cbExtensionOption.SelectedIndex = 1;  // PnET-CN-Extension

            cbSeedingAlg.SelectedIndex = 0;  // PnET-CN-Extension


            InitializeCbEcoPara();  // intialize cbAddEcoPara

            InitializeCbSppGenericPara();  // intialize cbSppGenericPara

            InitializeDataGridViewSppLifeHistory(); // intialize dataGridViewSppLifeHistory

            InitializeDataGridViewSppEcophysi(); // intialize dataGridViewSppEcophysi

            //dataGridViewSppEcophysi.Rows.Clear(); // Clears all rows

        }

        //
        public class ResultData
        {
            public int Day { get; set; }
            public double Precipitation { get; set; }
            public double Temperature { get; set; }
        }




        private void MenuExit_Click(object sender, EventArgs e)
        {
            this.Close();

        }

        private void MenuRun_Click(object sender, EventArgs e)
        {
            // Get the current directory path
            //string currentDirectory = Directory.GetCurrentDirectory();

            // Get the parent directory of the current directory
            //string parentDirectory = Directory.GetParent(currentDirectory)?.FullName ?? "No parent directory found";

            // Get the input directory where all input files generated by the win interface
            //string InputDirectory = currentDirectory + "\\Input";

            string InputDirectory = @".\Input";

            // Get the case file generated by the win interface
            string batFilePath = InputDirectory + "\\site_run.bat";

            string OutputDirectory = @".\Output";

            //MessageBox.Show($"Current Directory: {currentDirectory}", "Message");


            try
            {
                // Path to the .bat file
                //string batFilePath = @"C:\Path\To\YourFile.bat";

                // Create a new process
                Process process = new Process
                {
                    StartInfo = new ProcessStartInfo
                    {
                        FileName = batFilePath,   // Specify the .bat file
                        UseShellExecute = false, // Do not use the OS shell
                        CreateNoWindow = true,   // Hide the command prompt window
                        RedirectStandardOutput = true, // Capture the output
                        RedirectStandardError = true   // Capture error messages
                    }
                };

                // Start the process
                process.Start();

                // Optionally, read the output
                string output = process.StandardOutput.ReadToEnd();
                string error = process.StandardError.ReadToEnd();

                // Wait for the process to finish
                //process.WaitForExit();

                // Display the output or errors in a message box
                //MessageBox.Show($"Output:\n{output}\n\nError:\n{error}", "Batch File Execution");

                MessageBox.Show($"Model running ends", "Batch File Execution");

                // copy results to Output directory
                string ResultDirectory = @".\Input\output";

                CopyDirectory(ResultDirectory, OutputDirectory);



            }
            catch (Exception ex)
            {
                // Handle exceptions
                MessageBox.Show($"An error occurred: {ex.Message}", "Error");
            }
        }

        static void CopyDirectory(string sourceDir, string destinationDir, bool overwrite = true)
        {
            // Ensure the source directory exists
            if (!Directory.Exists(sourceDir))
            {
                throw new DirectoryNotFoundException($"Source directory does not exist: {sourceDir}");
            }

            // Create the destination directory if it does not exist
            Directory.CreateDirectory(destinationDir);

            // Copy all files
            foreach (string file in Directory.GetFiles(sourceDir))
            {
                string fileName = Path.GetFileName(file);
                string destFile = Path.Combine(destinationDir, fileName);
                File.Copy(file, destFile, overwrite);
            }

            // Copy all subdirectories
            foreach (string subDir in Directory.GetDirectories(sourceDir))
            {
                string subDirName = Path.GetFileName(subDir);
                string destSubDir = Path.Combine(destinationDir, subDirName);
                CopyDirectory(subDir, destSubDir, overwrite);
            }
        }




        private void toolStripSave_Click(object sender, EventArgs e)
        {

        }

        private void openFileDialog1_FileOk(object sender, CancelEventArgs e)
        {

        }

        private void btClimate_Click(object sender, EventArgs e)
        {
            OpenFileDialog ClimateDialog = new OpenFileDialog();
            DialogResult result = ClimateDialog.ShowDialog();
            if (result == DialogResult.OK)
            {
                tbClimateFile.Text = ClimateDialog.FileName;

            }
        }

        private void MenuUserGuide_Click(object sender, EventArgs e)
        {
            //string currentDirectory = Directory.GetCurrentDirectory();
            // Specify the path to user guide PDF file
            string pdfFilePath = @".\Inter\LANDIS-II-Site User Guide.pdf";

            //MessageBox.Show($"Current Directory: {pdfFilePath}", "Message");
            try
            {

                // Open the PDF file using the default application
                Process.Start(new ProcessStartInfo
                {
                    FileName = pdfFilePath,
                    UseShellExecute = true // Ensures the file opens with the default viewer
                });
            }
            catch (Exception ex)
            {
                // Handle errors (e.g., file not found)
                MessageBox.Show($"An error occurred: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // Show a MessageBox with "About" information
            MessageBox.Show(
                "LANDIS-II-Site Tool Version 3.0\n Brian R. Miranda; Brian R.Sturtevant; Zaixing Zhou" +
                "\n© 2024 USDA Forest Service",
                "About",
                MessageBoxButtons.OK,
                MessageBoxIcon.Information
                );
        }

        private void saveOutputToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // Get the output directory where all output files generated by Landis-ii model
            string OutputDirectory = @".\Output";


            // set current directory as default
            string defaultPath = Directory.GetCurrentDirectory();

            FolderBrowserDialog SaveResultsDialog = new FolderBrowserDialog();
            SaveResultsDialog.Description = "Select a folder to save your files";
            SaveResultsDialog.SelectedPath = defaultPath;

            DialogResult result = SaveResultsDialog.ShowDialog();
            if (result == DialogResult.OK)
            {
                string SaveResultsDirectory = SaveResultsDialog.SelectedPath;

                CopyDirectory(OutputDirectory, SaveResultsDirectory);


                MessageBox.Show($"Current Directory: {SaveResultsDirectory}", "Message");

            }

        }


        // initialize cbEcoPara;  // customize

        private void InitializeCbEcoPara()
        {
            // set default values for 

            // read the data file
            string filePath = @".\Inter\Site_EcoregionParameters.txt"; // Path to the text file

            if (File.Exists(filePath))
            {
                // Clear any existing items in the ComboBox
                cbEcoPara.Items.Clear();

                // Read all lines from the file
                string[] lines = File.ReadAllLines(filePath);

                // Skip the first two lines
                for (int i = 2; i < lines.Length; i++)
                {
                    cbEcoPara.Items.Add(lines[i].Trim()); // Add remaining lines
                }


                cbEcoPara.Sorted = true; // Automatically sorts items alphabetically
            }
            else
            {
                MessageBox.Show("The file does not exist.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }





            //cbEcoPara.SelectedIndex = 0;  // customize


        }


        private void btAddEcoPara_Click(object sender, EventArgs e)
        {

            string rowName = cbEcoPara.Text;



            if (string.IsNullOrWhiteSpace(rowName))
            {
                // Add a new column to the DataGridView
                dataGridViewEcoPara.Rows.Add(rowName, "");
            }
            else
            {
                string[] words = rowName.Split(new[] { ' ', '\t', '\n' }, StringSplitOptions.RemoveEmptyEntries);
                dataGridViewEcoPara.Rows.Add(words[0], words[1]);
            }



        }


        private void btDeleteEcoPara_Click(object sender, EventArgs e)
        {
            // Check if a row is selected
            if (dataGridViewEcoPara.SelectedRows.Count > 0)
            {
                // Delete the selected rows
                foreach (DataGridViewRow row in dataGridViewEcoPara.SelectedRows)
                {
                    if (!row.IsNewRow) // Ensure it is not the "new row" placeholder
                    {
                        dataGridViewEcoPara.Rows.Remove(row);
                    }
                }

                // Update row numbers after deletion
                //UpdateRowNumbers();
            }
            else
            {
                MessageBox.Show("Please select a row to delete.", "Delete Row", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }

        }


        // initialize cbSppGenericPara
        private void InitializeCbSppGenericPara()
        {
            // set default values for cbSppGenericPara

            // read the data file
            string filePath = @".\Inter\Site_Generic_Pnet.txt"; // Path to the text file

            if (File.Exists(filePath))
            {
                // Clear any existing items in the ComboBox
                cbSppGenericPara.Items.Clear();

                // Read all lines from the file
                string[] lines = File.ReadAllLines(filePath);

                // Skip the first two lines
                for (int i = 2; i < lines.Length; i++)
                {
                    cbSppGenericPara.Items.Add(lines[i].Trim()); // Add remaining lines
                }


                cbSppGenericPara.Sorted = true; // Automatically sorts items alphabetically
            }
            else
            {
                MessageBox.Show("The file does not exist.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            cbSppGenericPara.SelectedIndex = 0;  // customize


        }

        private void btAddSpeciesGenericPara_Click(object sender, EventArgs e)
        {
            string rowName = cbSppGenericPara.Text;



            if (string.IsNullOrWhiteSpace(rowName))
            {
                // Add a new column to the DataGridView
                dataGridViewSppGeneric.Rows.Add(rowName, "");
            }
            else
            {
                string[] words = rowName.Split(new[] { ' ', '\t', '\n' }, StringSplitOptions.RemoveEmptyEntries);
                dataGridViewSppGeneric.Rows.Add(words[0], words[1]);
            }


        }

        private void btDeleteSppGeneric_Click(object sender, EventArgs e)
        {
            // Check if a row is selected
            if (dataGridViewSppGeneric.SelectedRows.Count > 0)
            {
                // Delete the selected rows
                foreach (DataGridViewRow row in dataGridViewSppGeneric.SelectedRows)
                {
                    if (!row.IsNewRow) // Ensure it is not the "new row" placeholder
                    {
                        dataGridViewSppGeneric.Rows.Remove(row);
                    }
                }

                // Update row numbers after deletion
                //UpdateRowNumbers();
            }
            else
            {
                MessageBox.Show("Please select a row to delete.", "Delete Row", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }


        }

        private void btAddSppLifeHistoryPara_Click(object sender, EventArgs e)
        {

            // Prompt user for column name
            string columnName = Prompt("Enter parameter name:", "Add Parameter");

            if (!string.IsNullOrEmpty(columnName))
            {
                // Add a new column to the DataGridView
                dataGridViewSppLifeHistory.Columns.Add(columnName, columnName);
            }


        }

        private string Prompt(string text, string caption)
        {
            // Create a prompt dialog to get input from the user
            Form prompt = new Form
            {
                Width = 400,
                Height = 150,
                Text = caption
            };

            System.Windows.Forms.Label textLabel = new System.Windows.Forms.Label { Left = 20, Top = 20, Text = text, AutoSize = true };
            TextBox inputBox = new TextBox { Left = 20, Top = 50, Width = 340 };
            Button confirmationButton = new Button
            {
                Text = "OK",
                Left = 270,
                Width = 90,
                Top = 80,
                DialogResult = DialogResult.OK
            };

            confirmationButton.Click += (sender, e) => { prompt.Close(); };

            prompt.Controls.Add(textLabel);
            prompt.Controls.Add(inputBox);
            prompt.Controls.Add(confirmationButton);
            prompt.AcceptButton = confirmationButton;

            return prompt.ShowDialog() == DialogResult.OK ? inputBox.Text : null;
        }



        // initialize dataGridViewSppLifeHistory
        private void InitializeDataGridViewSppLifeHistory()
        {
            // set default values for cbSppGenericPara

            // read the data file
            string filePath = @".\Inter\Site_Species_Landis.txt"; // Path to the text file

            if (File.Exists(filePath))
            {
                // Clear any existing items in the ComboBox
                //cbSppGenericPara.Items.Clear();

                // Read all lines from the file
                string[] lines = File.ReadAllLines(filePath);

                string[] columns = (lines[1].Trim()).Split(new[] { ' ', '\t', '\n' }, StringSplitOptions.RemoveEmptyEntries);

                foreach (string col in columns)
                {
                    dataGridViewSppLifeHistory.Columns.Add(col, col);
                }
                // Skip the first two lines
                for (int i = 2; i < lines.Length; i++)
                {
                    string[] records = (lines[i].Trim()).Split(new[] { ' ', '\t', '\n' }, StringSplitOptions.RemoveEmptyEntries);
                    dataGridViewSppLifeHistory.Rows.Add(records);
                }

            }
            else
            {
                MessageBox.Show("The file does not exist.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }



        }

        private void btDeleteSppLifeHistoryPara_Click(object sender, EventArgs e)
        {
            if (dataGridViewSppLifeHistory.SelectedCells.Count > 0)
            {
                int selectedColumnIndex = dataGridViewSppLifeHistory.SelectedCells[0].ColumnIndex;

                if (selectedColumnIndex >= 0)
                {
                    string columnName = dataGridViewSppLifeHistory.Columns[selectedColumnIndex].Name;
                    dataGridViewSppLifeHistory.Columns.RemoveAt(selectedColumnIndex);
                    MessageBox.Show($"Column '{columnName}' has been deleted.");
                }
            }
            else
            {
                MessageBox.Show("No column selected.");
            }

        }

        private void btAddSppLifeHistorySpp_Click(object sender, EventArgs e)
        {
            dataGridViewSppLifeHistory.Rows.Add();
        }

        private void btDeleteSppLifeHistorySpp_Click(object sender, EventArgs e)
        {
            // Check if a row is selected
            if (dataGridViewSppLifeHistory.SelectedRows.Count > 0)
            {
                // Delete the selected rows
                foreach (DataGridViewRow row in dataGridViewSppLifeHistory.SelectedRows)
                {
                    if (!row.IsNewRow) // Ensure it is not the "new row" placeholder
                    {
                        dataGridViewSppLifeHistory.Rows.Remove(row);
                    }
                }

                // Update row numbers after deletion
                //UpdateRowNumbers();
            }
            else
            {
                MessageBox.Show("Please select a row to delete.", "Delete Row", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }

        }

        // initialize dataGridViewSppEcophysi
        private void InitializeDataGridViewSppEcophysi()
        {
            // set default values for cbSppGenericPara

            // read the data file
            string filePath = @".\Inter\Site_Species_Pnet.txt"; // Path to the text file

            if (File.Exists(filePath))
            {

                // Read all lines from the file
                string[] lines = File.ReadAllLines(filePath);

                string[] columns = (lines[1].Trim()).Split(new[] { ' ', '\t', '\n' }, StringSplitOptions.RemoveEmptyEntries);

                foreach (string col in columns)
                {
                    dataGridViewSppEcophysi.Columns.Add(col, col);
                }
                // Skip the first two lines
                for (int i = 2; i < lines.Length; i++)
                {
                    string[] records = (lines[i].Trim()).Split(new[] { ' ', '\t', '\n' }, StringSplitOptions.RemoveEmptyEntries);
                    dataGridViewSppEcophysi.Rows.Add(records);
                }

            }
            else
            {
                MessageBox.Show("The file does not exist.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }



        }

        private void btAddSppEcophysiPara_Click(object sender, EventArgs e)
        {

            // Prompt user for column name
            string columnName = Prompt("Enter parameter name:", "Add Parameter");

            if (!string.IsNullOrEmpty(columnName))
            {
                // Add a new column to the DataGridView
                dataGridViewSppEcophysi.Columns.Add(columnName, columnName);
            }

        }

        private void btDeleteSppEcophysiPara_Click(object sender, EventArgs e)
        {
            if (dataGridViewSppEcophysi.SelectedCells.Count > 0)
            {
                int selectedColumnIndex = dataGridViewSppEcophysi.SelectedCells[0].ColumnIndex;

                if (selectedColumnIndex >= 0)
                {
                    string columnName = dataGridViewSppEcophysi.Columns[selectedColumnIndex].Name;
                    dataGridViewSppEcophysi.Columns.RemoveAt(selectedColumnIndex);
                    MessageBox.Show($"Column '{columnName}' has been deleted.");
                }
            }
            else
            {
                MessageBox.Show("No column selected.");
            }
        }

        private void btAddSppEcophysiSpp_Click(object sender, EventArgs e)
        {
            dataGridViewSppEcophysi.Rows.Add();
        }

        private void btDeleteSppEcophysiSpp_Click(object sender, EventArgs e)
        {
            // Check if a row is selected
            if (dataGridViewSppEcophysi.SelectedRows.Count > 0)
            {
                // Delete the selected rows
                foreach (DataGridViewRow row in dataGridViewSppEcophysi.SelectedRows)
                {
                    if (!row.IsNewRow) // Ensure it is not the "new row" placeholder
                    {
                        dataGridViewSppEcophysi.Rows.Remove(row);
                    }
                }

                // Update row numbers after deletion
                //UpdateRowNumbers();
            }
            else
            {
                MessageBox.Show("Please select a row to delete.", "Delete Row", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        public static List<Dictionary<string, object>> ReadCsvAsDictionary(string filePath)
        {
            var records = new List<Dictionary<string, object>>();

            if (File.Exists(filePath))
            {
                string[] lines = File.ReadAllLines(filePath);

                // Read the headers from the first line
                string[] headers = lines[0].Split(',');

                // Process each data row
                for (int i = 1; i < lines.Length; i++)
                {
                    string[] values = lines[i].Split(',');
                    var record = new Dictionary<string, object>();

                    for (int j = 0; j < headers.Length; j++)
                    {
                        record[headers[j]] = values[j];
                    }

                    records.Add(record);
                }
            }
            else
            {
                MessageBox.Show("CSV file not found.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            return records;
        }


        List<Dictionary<string, object>> RecordsSite = new List<Dictionary<string, object>>();
        private void LoadResultSite()
        {
            // Read data from the CSV file
            string filePath = @"Output\Site1\Site.csv"; // Path to the file
            RecordsSite = ReadCsvAsDictionary(filePath);

        }

        private GraphPane CreateGraph(ZedGraphControl zgc, string yLabel, List<Dictionary<string, object>> records, string Xvar, string Yvar, Color c)
        {
            GraphPane myPane = zgc.GraphPane;

            // Set the titles and axis labels
            
            myPane.XAxis.Title.Text = "Time";
            myPane.YAxis.Title.Text = yLabel;

            PointPairList list = new PointPairList();


            foreach (var record in records)
            {
                double _x, _y;
                double.TryParse((string)record[Xvar], out _x);
                double.TryParse((string)record[Yvar], out _y);
                //PointPair _pointPair = new PointPair(double.TryParse(Value, out OutVal)(]), (double)record[Yvar]);
                list.Add(_x, _y);

            }
            //c = Color.FromArgb(2, 0, 0, 0);
            LineItem curve = myPane.AddCurve(Yvar, list, c, SymbolType.None);

            zgc.AxisChange();
            zgc.Invalidate();
            return myPane;
        }

        private void checkedListBoxClimate_ItemCheck(object sender, ItemCheckEventArgs e)
        {          
            ZedGraphControl zgc = zedGraphControlClimate;  // carbon zgc pane
            CheckedListBox myclb = checkedListBoxClimate;    // carbon checked List Box

            var mypane = zgc.GraphPane;            
            mypane.Title.Text = string.Empty;

            string Xvar = "Time";
            // Check which item is toggled
            string selectedItem = myclb.Items[e.Index].ToString();

            if (e.NewValue == CheckState.Checked)
            {
                // Show Temperature in Chart
                Color c = colorPalette[e.Index];
                mypane = CreateGraph(zgc, selectedItem, RecordsSite, Xvar, selectedItem, c);
            }
            else
            {
                // Clear Temperature Data
                CurveItem curve = mypane.CurveList[selectedItem];
                // Remove the curve from the list
                mypane.CurveList.Remove(curve);

                // Refresh the graph
                zgc.AxisChange();
                zgc.Invalidate();

            }

        }

        Color[] colorPalette = new Color[]
        {
               Color.Red,
               Color.Blue,
               Color.Green,
               Color.Orange,
               Color.Purple,
               Color.Black,
               Color.Brown,
               Color.Gray,
               Color.Navy,
               Color.Magenta
        };
        private void checkedListBoxCarbon_ItemCheck(object sender, ItemCheckEventArgs e)
        {
            ZedGraphControl zgc = zedGraphControlCarbon;  // carbon zgc pane
            CheckedListBox myclb = checkedListBoxCarbon;    // carbon checked List Box

            var mypane = zgc.GraphPane;
            
            mypane.Title.Text = string.Empty;

            string Xvar = "Time";

            // Check which item is toggled
            string selectedItem = myclb.Items[e.Index].ToString();

            if (e.NewValue == CheckState.Checked)
            {
                // Show Temperature in Chart
                Color c = colorPalette[e.Index];
                mypane = CreateGraph(zgc, selectedItem, RecordsSite, Xvar, selectedItem, c);
            }
            else
            {
                // Clear Temperature Data
                CurveItem curve = mypane.CurveList[selectedItem];
                // Remove the curve from the list
                mypane.CurveList.Remove(curve);

                // Refresh the graph
                zgc.AxisChange();
                zgc.Invalidate();

            }

        }






    }


}
